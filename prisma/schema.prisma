// schema.prisma

// Define your generator and datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

  // schema   = "prisma_schema"
}

// Define your models
model Career {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  country   String
  cv        String?
  message   String?
  role      String
  status    Int       @default(1)
  createdAt DateTime  @default(now())

  @@map("careers")
}

model Contact {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String
  subject   String?
  message   String
  createdAt DateTime  @default(now())

  @@map("contact")
}

model Notification {
  id        Int       @id @default(autoincrement())
  title     String
  message   String
  createdAt DateTime  @default(now())

  @@map("notifications")
}

model Transaction {
  id                  Int       @id @default(autoincrement())
  tx_ref              String
  amount              Int
  donationType        String
  currency            String
  email               String
  fullNames           String
  status              String    @default("initiated")
  transactionId       String?
  transactionSummary  String?
  transactionType     String    @default("deposit")
  transactionMethod   String?
  otherNotes          String?
  donation            Donation? @relation("TransactionToDonation")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt

  @@map("transactions")
}
model Wallet {
  id        Int       @id @default(autoincrement())
  currency  String
  symbol    String
  amount    Int       @default(0)
  status    Int       @default(1)

  @@map("wallet")
}

model Donation {
  id            Int         @id @default(autoincrement())
  donorName     String?
  campaignId    String?
  message       String?
  transaction   Transaction  @relation("TransactionToDonation", fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId Int          @unique
  createdAt     DateTime     @default(now())
  isRecurring   Boolean      @default(false)

  @@map("donations")
}

model Coupon {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  discount    Float    // Percentage (e.g., 10 for 10%) or a fixed amount (e.g., 5 for $5 off)
  type        String   // 'percentage' or 'fixed'
  expiresAt   DateTime
  usageLimit  Int      // How many times this coupon can be used
  usedCount   Int      @default(0) // Count of how many times this coupon has been used
  active      Boolean  @default(true) // Indicates if the coupon is still valid
  
  @@map("coupons")
}


model Category {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  posts  Post[]   @relation("PostCategories")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  postId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  parentId  Int?
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  published   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  authorId    Int
  isFeatured  Boolean     @default(false)
  author      User       @relation(fields: [authorId], references: [id])
  categories  Category[] @relation("PostCategories")
  comments    Comment[]
  imageUrl    String?   
  views       Int        @default(0) // Track the number of views
  reactions   Reaction[] // Relationship with reactions model 
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String   // Type of reaction: e.g., 'like', 'love', 'dislike', etc.
  postId    Int
  authorId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}



model User {
  id        Int      @id @default(autoincrement())
  fullNames String
  email     String   @unique
  password  String?
  googleId  String?  @unique
  status    Int      @default(1)
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedBy Int?

  // Each user can be an admin for only one country
  country   Country? @relation(fields: [countryId], references: [id])
  countryId Int?     @unique

  posts     Post[]
  comments  Comment[]

  @@map("users")
  Country Country[] @relation("CountryAdmins")
  Reaction Reaction[]
}

model Country {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  image       String?
  description String?
  admins      User[]       @relation("CountryAdmins")
  departments Department[]
  teamMembers TeamMember[]
  countryContacts CountryContact[]
  
  @@map("countries")
  User User[]
}

model TeamMember {
  id          Int      @id @default(autoincrement())
  name        String
  position    String
  profilePicture String?
  linkedin    String?
  facebook    String?
  twitter     String?
  youtube     String?
  description String?
  isMain      Boolean  @default(false)
  country     Country?   @relation(fields: [countryId], references: [id])
  countryId   Int?
  
  @@map("team_members")
}

model CountryContact {
  id          Int      @id @default(autoincrement())
  location   String
  phone      String
  email      String
  postalCode String
  country     Country   @relation(fields: [countryId], references: [id])
  countryId   Int
  
  @@map("country_contacts")
}

model Department {
  id         Int           @id @default(autoincrement())
  name       String
  title        String?
  content      String?
   published   Boolean    @default(false)
  countryId  Int
  imageUrl   String?
  country    Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  // post       DepartmentPost?
}

model DepartmentPost {
  id           Int         @id @default(autoincrement())
  title        String
  content      String
  imageUrl     String?
  departmentId Int         @unique
  // department   Department  @relation(fields: [departmentId], references: [id])
}

model Meeting {
  id        Int      @id @default(autoincrement())
  meetingId String   @unique
  title     String
  image     String?
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Job {
 id           Int      @id @default(autoincrement())
 title        String
 subTitle     String
 description  String
 location     Int?
 isMain       Boolean  @default(false)
 deadline     DateTime?
 status       Boolean  @default(true)
 createdAt    DateTime  @default(now())

}